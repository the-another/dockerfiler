server {
    listen 80;
    server_name _;
    root /home/another/app/public;
    index index.php index.html index.htm;
    
    # FastCGI cache variables
    set $skip_cache 0;
    
    # Security: Enhanced logging with security format
    access_log /home/another/logs/nginx/access.log security;
    error_log /home/another/logs/nginx/error.log warn;
    
    # Security: Connection and rate limiting
    limit_conn conn_limit_per_ip 10;
    limit_conn conn_limit_per_server 100;
    limit_req zone=general burst=20 nodelay;
    
    # Security: Block bad user agents and referers
    if ($blocked_agent) {
        return 444;
    }
    if ($blocked_referer) {
        return 444;
    }
    
    # Security: Block requests with no user agent
    if ($http_user_agent = "") {
        return 444;
    }
    
    # Security: Block requests with suspicious patterns
    if ($request_uri ~* "(\.\./|\.\.\\|\.\.%2f|\.\.%5c)") {
        return 444;
    }
    
    # Security: Block requests with null bytes
    if ($request_uri ~ "\x00") {
        return 444;
    }
    
    # Security: Block requests with suspicious query strings
    if ($args ~* "(<|%3C).*script.*(>|%3E)") {
        return 444;
    }
    
    # Security: Block requests with suspicious headers
    if ($http_cookie ~* "(<|%3C).*script.*(>|%3E)") {
        return 444;
    }
    
    # Security: Additional security headers (redundant with main config but explicit)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'self'; base-uri 'self'; form-action 'self'" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Security: Hide Nginx version (redundant but explicit)
    server_tokens off;
    
    # Security: Deny access to sensitive files and directories
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Deny access to backup and config files
    location ~* \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|sqlite|db)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Deny access to version control directories
    location ~ /\.(git|svn|hg|bzr) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Deny access to temporary files
    location ~* \.(tmp|temp|swp|swo|~)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Deny access to PHP files in uploads directory
    location ~* /uploads/.*\.php$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Deny access to common attack patterns
    location ~* /(wp-admin|wp-login|wp-content|wp-includes) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Deny access to admin panels
    location ~* /(admin|administrator|phpmyadmin|pma) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Rate limiting for login attempts
    location ~* /(login|signin|auth) {
        limit_req zone=login burst=5 nodelay;
        try_files $uri $uri/ /index.php?$query_string;
    }
    
    # Security: Rate limiting for API endpoints
    location ~* /api/ {
        limit_req zone=api burst=20 nodelay;
        try_files $uri $uri/ /index.php?$query_string;
    }
    
    # Security: Enhanced PHP processing with additional security
    location ~ \.php$ {
        try_files $uri =404;
        
        # Security: Prevent path traversal
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        
        # Security: Block requests with suspicious PHP parameters
        if ($fastcgi_script_name ~* "\.\./") {
            return 444;
        }
        
        fastcgi_pass unix:/home/another/run/php-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        
        # Security: Additional FastCGI parameters
        fastcgi_param HTTP_PROXY "";
        fastcgi_param HTTPS $https if_not_empty;
        fastcgi_param SERVER_PORT $server_port;
        fastcgi_param SERVER_NAME $server_name;
        fastcgi_param REQUEST_URI $request_uri;
        fastcgi_param DOCUMENT_URI $document_uri;
        fastcgi_param DOCUMENT_ROOT $document_root;
        fastcgi_param SERVER_PROTOCOL $server_protocol;
        fastcgi_param REQUEST_METHOD $request_method;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_param CONTENT_TYPE $content_type;
        fastcgi_param CONTENT_LENGTH $content_length;
        fastcgi_param GATEWAY_INTERFACE CGI/1.1;
        fastcgi_param SERVER_SOFTWARE nginx/$nginx_version;
        fastcgi_param REMOTE_ADDR $remote_addr;
        fastcgi_param REMOTE_PORT $remote_port;
        fastcgi_param SERVER_ADDR $server_addr;
        fastcgi_param HTTP_HOST $http_host;
        fastcgi_param HTTP_USER_AGENT $http_user_agent;
        fastcgi_param HTTP_ACCEPT $http_accept;
        fastcgi_param HTTP_ACCEPT_LANGUAGE $http_accept_language;
        fastcgi_param HTTP_ACCEPT_ENCODING $http_accept_encoding;
        fastcgi_param HTTP_CONNECTION $http_connection;
        fastcgi_param HTTP_REFERER $http_referer;
        fastcgi_param HTTP_COOKIE $http_cookie;
        fastcgi_param HTTP_X_FORWARDED_FOR $http_x_forwarded_for;
        fastcgi_param HTTP_X_FORWARDED_PROTO $http_x_forwarded_proto;
        fastcgi_param HTTP_X_FORWARDED_HOST $http_x_forwarded_host;
        fastcgi_param HTTP_X_FORWARDED_PORT $http_x_forwarded_port;
        fastcgi_param HTTP_X_REAL_IP $http_x_real_ip;
        
        include fastcgi_params;
        
        # Security: FastCGI timeouts
        fastcgi_read_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_connect_timeout 60;
        
        # Security: FastCGI buffer settings
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
        
        # Security: FastCGI cache settings (if using cache)
        fastcgi_cache_bypass $skip_cache;
        fastcgi_no_cache $skip_cache;
    }
    
    # Security: Enhanced static files caching with security headers
    location ~* \.(css|gif|ico|jpeg|jpg|js|png|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff" always;
        access_log off;
        
        # Security: Prevent execution of static files
        location ~* \.(js|css)$ {
            add_header Content-Type text/plain;
        }
    }
    
    # Security: Deny access to robots.txt and sitemap.xml if not needed
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
    
    location = /sitemap.xml {
        allow all;
        log_not_found off;
        access_log off;
    }
    
    # Security: Default location block with security measures
    location / {
        try_files $uri $uri/ /index.php?$query_string;
        
        # Security: Additional security headers for main content
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Security: Custom error pages (optional)
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}
