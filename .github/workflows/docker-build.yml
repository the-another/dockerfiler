name: Multi-Architecture Docker Build and Push

on:
  workflow_dispatch:
    inputs:
      php_versions:
        description: "PHP versions to build (comma-separated, e.g., '7.4,8.0,8.1')"
        required: true
        default: "7.4,8.0,8.1,8.2,8.3,8.4"
        type: string
      image_type:
        description: "Image type to build"
        required: true
        default: "both"
        type: choice
        options:
          - "php"
          - "nginx-php"
          - "both"
      push_to_registry:
        description: "Push to Docker Hub"
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_ORG: theanother

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      php_versions: ${{ steps.set-versions.outputs.php_versions }}
      matrix_include: ${{ steps.set-versions.outputs.matrix_include }}
    steps:
      - name: Parse PHP versions
        id: set-versions
        run: |
          # Parse comma-separated PHP versions from input
          php_versions="${{ github.event.inputs.php_versions }}"
          # Remove spaces and create compact JSON array
          php_versions=$(echo "$php_versions" | tr -d ' ' | tr ',' '\n' | jq -R . | jq -s . | jq -c .)
          echo "php_versions=$php_versions" >> $GITHUB_OUTPUT

          # Create matrix include array for selected versions only
          matrix_include=$(echo "$php_versions" | jq -r '.[]' | while read version; do
            echo "{\"php_version\":\"$version\",\"alpine_version\":\"3.22\"}"
          done | jq -s . | jq -c .)
          echo "matrix_include=$matrix_include" >> $GITHUB_OUTPUT

          echo "Parsed PHP versions: $php_versions"
          echo "Matrix include: $matrix_include"

  build-php:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        php_version: ${{ fromJson(needs.setup.outputs.php_versions) }}
        include: ${{ fromJson(needs.setup.outputs.matrix_include) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if PHP job should run
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Skip job if only nginx-php is requested
          if [ "${{ github.event.inputs.image_type }}" = "nginx-php" ]; then
            echo "Skipping PHP job - only nginx-php requested"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Set PHP image configuration
        id: php-config
        run: |
          echo "image_name=${{ env.DOCKER_ORG }}/another-php" >> $GITHUB_OUTPUT
          echo "context=./samples/alpine/php/${{ matrix.php_version }}" >> $GITHUB_OUTPUT
          echo "tag_suffix=${{ matrix.php_version }}-alpine" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ steps.php-config.outputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ steps.php-config.outputs.tag_suffix }},enable={{is_default_branch}}
            type=raw,value=${{ steps.php-config.outputs.tag_suffix }}-{{date 'YYYYMMDD'}},enable={{is_default_branch}}

      - name: Build and push PHP Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.php-config.outputs.context }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PHP_VERSION=${{ matrix.php_version }}
            ALPINE_VERSION=${{ matrix.alpine_version }}

      - name: Generate SBOM for PHP image
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ steps.php-config.outputs.image_name }}:${{ steps.php-config.outputs.tag_suffix }}
          format: spdx-json
          output-file: sbom-php-${{ matrix.php_version }}.json

      - name: Upload PHP SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-php-${{ matrix.php_version }}
          path: sbom-php-${{ matrix.php_version }}.json

  build-nginx-php:
    runs-on: ubuntu-latest
    needs: [setup, build-php]
    strategy:
      matrix:
        php_version: ${{ fromJson(needs.setup.outputs.php_versions) }}
        include: ${{ fromJson(needs.setup.outputs.matrix_include) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if nginx-php job should run
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Skip job if only php is requested
          if [ "${{ github.event.inputs.image_type }}" = "php" ]; then
            echo "Skipping nginx-php job - only php requested"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Set nginx-php image configuration
        id: nginx-php-config
        run: |
          echo "image_name=${{ env.DOCKER_ORG }}/another-php" >> $GITHUB_OUTPUT
          echo "context=./samples/alpine/nginx-php/${{ matrix.php_version }}" >> $GITHUB_OUTPUT
          echo "tag_suffix=${{ matrix.php_version }}-nginx-alpine" >> $GITHUB_OUTPUT
          echo "base_image=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/another-php:${{ matrix.php_version }}-alpine" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ steps.nginx-php-config.outputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ steps.nginx-php-config.outputs.tag_suffix }},enable={{is_default_branch}}
            type=raw,value=${{ steps.nginx-php-config.outputs.tag_suffix }}-{{date 'YYYYMMDD'}},enable={{is_default_branch}}

      - name: Build and push nginx-php Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.nginx-php-config.outputs.context }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PHP_VERSION=${{ matrix.php_version }}
            ALPINE_VERSION=${{ matrix.alpine_version }}
            BASE_IMAGE=${{ steps.nginx-php-config.outputs.base_image }}

      - name: Generate SBOM for nginx-php image
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ steps.nginx-php-config.outputs.image_name }}:${{ steps.nginx-php-config.outputs.tag_suffix }}
          format: spdx-json
          output-file: sbom-nginx-php-${{ matrix.php_version }}.json

      - name: Upload nginx-php SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-nginx-php-${{ matrix.php_version }}
          path: sbom-nginx-php-${{ matrix.php_version }}.json

  security-scan-php:
    runs-on: ubuntu-latest
    needs: [setup, build-php]
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        php_version: ${{ fromJson(needs.setup.outputs.php_versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner for PHP image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/another-php:${{ matrix.php_version }}-alpine
          format: "sarif"
          output: "trivy-results-php-${{ matrix.php_version }}.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results-php-${{ matrix.php_version }}.sarif"
          category: "trivy-php-${{ matrix.php_version }}"

  security-scan-nginx-php:
    runs-on: ubuntu-latest
    needs: [setup, build-nginx-php]
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        php_version: ${{ fromJson(needs.setup.outputs.php_versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner for nginx-php image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/another-php:${{ matrix.php_version }}-nginx-alpine
          format: "sarif"
          output: "trivy-results-nginx-php-${{ matrix.php_version }}.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results-nginx-php-${{ matrix.php_version }}.sarif"
          category: "trivy-nginx-php-${{ matrix.php_version }}"

  cleanup:
    runs-on: ubuntu-latest
    needs:
      [
        setup,
        build-php,
        build-nginx-php,
        security-scan-php,
        security-scan-nginx-php,
      ]
    if: always()

    steps:
      - name: Clean up Docker resources
        run: |
          docker system prune -f
          docker buildx prune -f
