name: Multi-Architecture Docker Build and Push

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      php_version:
        description: "PHP version to build"
        required: true
        default: "7.4"
        type: choice
        options:
          - "7.4"
          - "8.0"
          - "8.1"
          - "8.2"
          - "8.3"
          - "8.4"
      push_to_registry:
        description: "Push to Docker Hub"
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: nginx-php-fpm

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: [7.4, 8.0, 8.1, 8.2, 8.3, 8.4]
        include:
          - php_version: 7.4
            alpine_version: 3.22
          - php_version: 8.0
            alpine_version: 3.22
          - php_version: 8.1
            alpine_version: 3.22
          - php_version: 8.2
            alpine_version: 3.22
          - php_version: 8.3
            alpine_version: 3.22
          - php_version: 8.4
            alpine_version: 3.22

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:latest

       - name: Log in to Docker Hub
         if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true')
         uses: docker/login-action@v3
         with:
           registry: ${{ env.DOCKER_REGISTRY }}
           username: ${{ secrets.DOCKER_USERNAME }}
           password: ${{ secrets.DOCKER_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=php-${{ matrix.php_version }}-alpine,enable={{is_default_branch}}
            type=raw,value=php-${{ matrix.php_version }}-alpine-{{date 'YYYYMMDD'}},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch && matrix.php_version == '8.4'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./samples/alpine/php-fpm/${{ matrix.php_version }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PHP_VERSION=${{ matrix.php_version }}
            ALPINE_VERSION=${{ matrix.alpine_version }}
          target: production

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:php-${{ matrix.php_version }}-alpine
          format: spdx-json
          output-file: sbom-${{ matrix.php_version }}.json

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-php-${{ matrix.php_version }}
          path: sbom-${{ matrix.php_version }}.json

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        php_version: [7.4, 8.0, 8.1, 8.2, 8.3, 8.4]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:php-${{ matrix.php_version }}-alpine
          format: "sarif"
          output: "trivy-results-${{ matrix.php_version }}.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results-${{ matrix.php_version }}.sarif"

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        php_version: [7.4, 8.0, 8.1, 8.2, 8.3, 8.4]
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: ./samples/alpine/php-fpm/${{ matrix.php_version }}
          platforms: ${{ matrix.platform }}
          load: true
          tags: test-image:${{ matrix.php_version }}-${{ matrix.platform }}
          build-args: |
            PHP_VERSION=${{ matrix.php_version }}

      - name: Test PHP version
        run: |
          docker run --rm test-image:${{ matrix.php_version }}-${{ matrix.platform }} php -v

      - name: Test Nginx configuration
        run: |
          docker run --rm test-image:${{ matrix.php_version }}-${{ matrix.platform }} nginx -t

      - name: Test PHP-FPM configuration
        run: |
          docker run --rm test-image:${{ matrix.php_version }}-${{ matrix.platform }} php-fpm -t

      - name: Test container health
        run: |
          docker run -d --name test-container -p 8080:80 test-image:${{ matrix.php_version }}-${{ matrix.platform }}
          sleep 10
          curl -f http://localhost:8080 || exit 1
          docker stop test-container
          docker rm test-container

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, test]
    if: always()

    steps:
      - name: Clean up Docker resources
        run: |
          docker system prune -f
          docker buildx prune -f
